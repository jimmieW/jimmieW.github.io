<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmie West on Jimmie West</title>
    <link>/</link>
    <description>Recent content in Jimmie West on Jimmie West</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0200</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fatal Friction</title>
      <link>/project/fatal-friction/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>/project/fatal-friction/</guid>
      <description>&lt;p&gt;A game about taking control over a ball and mastering friction to avoid a fatal outcome.&lt;/p&gt;

&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Yk7EJ2LTArg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br/&gt;
The game was created in order to drive the development of the Pixleon Engine. Another important aspect of developing this game was to actually finish a game. Sounds easy but as it turns out, it is quite hard.&lt;/p&gt;

&lt;p&gt;So would I consider the game finished? Not really, but it is playable and I aim to iterate on it until I can proudly present a 1.0 version of the game.&lt;/p&gt;

&lt;p&gt;Currently the game is only available for the windows platform. If you want to test an early version of the game you can download it here: &lt;a href=&#34;https://github.com/jimmieW/jimmieW.github.io/releases/download/Fatal-Friction-0.1.1/Fatal.Friction.0.1.1.zip&#34; target=&#34;_blank&#34;&gt;Fatal Friction&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Master thesis</title>
      <link>/project/master-thesis/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>/project/master-thesis/</guid>
      <description>&lt;p&gt;I did my master thesis at a company called Donya Labs (aquired by Microsoft in 2017).
The goal of the project was to look into how &lt;a href=&#34;https://www.simplygon.com/&#34; target=&#34;_blank&#34;&gt;Simplygon&lt;/a&gt; could take advantage of the parallel processing power of GPUs in order to speed up normal/color map baking.&lt;/p&gt;

&lt;p&gt;The result of the work can be found here: &lt;a href=&#34;/project/master-thesis/master-thesis.pdf&#34; download=&#34;master-thesis&#34;&gt;GPU-optimized generation of normal and color maps&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pixleon Engine</title>
      <link>/project/pixleon-engine/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0200</pubDate>
      
      <guid>/project/pixleon-engine/</guid>
      <description>&lt;p&gt;The Pixleon Engine is a game engine written in C++ with focus on 3D-games with physics.&lt;/p&gt;

&lt;p&gt;The main motivation behind building it was to learn more about software development in general and game engine development in particular. For instance, I wanted to answer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to decouple different parts of a game engine?&lt;/li&gt;
&lt;li&gt;How to organize code into proper folders to help maintain decoupling?&lt;/li&gt;
&lt;li&gt;How to produce an interface from dlls that can be re-used in different games or interactive experiences?&lt;/li&gt;
&lt;li&gt;How to integrate the &lt;a href=&#34;http://bulletphysics.org/wordpress/&#34; target=&#34;_blank&#34;&gt;Bullet&lt;/a&gt; physics API into the engine?&lt;/li&gt;
&lt;li&gt;How to integrate the &lt;a href=&#34;https://www.fmod.com/&#34; target=&#34;_blank&#34;&gt;FMOD&lt;/a&gt; sound API into the engine?&lt;/li&gt;
&lt;li&gt;How to write a modular build system using GNU Make to build different version of the engine 32- or 64-bit and debug/release etc?&lt;/li&gt;
&lt;li&gt;How to setup Emacs to simplify compile/build etc.&lt;/li&gt;
&lt;li&gt;How to expose an easy to use game making API without loosing flexibility?&lt;/li&gt;
&lt;li&gt;How to setup a deferred rendering pipeline?&lt;/li&gt;
&lt;li&gt;How to integrate a screen space effect shaders such as SSAO?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
